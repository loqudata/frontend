
root ::= expr
expr ::= expr0 (select | slice | apply | binsuffix | objextend | insuper)*
select ::= DOT IDENTIFIER0
slice ::= L_BRACKET expr? slicesuffix? R_BRACKET
slicesuffix ::= COLON ( expr? ( COLON expr? )? )? | COLON2 expr?
apply ::= L_PAREN ( args )? R_PAREN
binsuffix ::= binaryop expr
objextend ::= L_CURLY objinside R_CURLY
insuper ::= IN SUPER
expr0 ::=	NULL | TRUE | FALSE | SELF | DOLLAR
|   SINGLE_QUOTED_STRING
|   DOUBLE_QUOTED_STRING
|   VERBATIM_SINGLE_QUOTED_STRING
|   VERBATIM_DOUBLE_QUOTED_STRING
|   TRIPLE_BAR_QUOTED_STRING
|   NUMBER
|	obj
|	arr
|	arrcomp
|	SUPER DOT IDENTIFIER0
|	SUPER L_BRACKET expr R_BRACKET
|   outerlocal
|	ifelse
|	L_PAREN expr R_PAREN
|	unaryop expr
|	FUNCTION L_PAREN ( params )? R_PAREN expr
|	assertStmt SEMICOLON expr
|	importop
|	importstrop
|	ERROR expr
|	IDENTIFIER0
ifelse ::= IF expr THEN expr ( ELSE expr )?
obj ::= L_CURLY objinside? R_CURLY
arr ::= L_BRACKET (expr (COMMA expr)* COMMA?)? R_BRACKET
arrcomp ::= L_BRACKET expr COMMA? forspec compspec R_BRACKET
objinside	::=	( objlocal COMMA )* L_BRACKET expr R_BRACKET COLON expr ( ( COMMA objlocal )* ( COMMA )? )? forspec compspec
|	members

members ::= member ( COMMA member )* ( COMMA )? { recoverWhile = member_list_recover }
private member_list_recover ::= !('}')

member	::=	objlocal | assertStmt | field { recoverWhile = member_recover }
private member_recover ::= !(',' | '}')

field ::=	fieldname ( PLUS )? h expr
|	fieldname L_PAREN ( params )? R_PAREN h expr

h ::=	COLON | COLON2 | COLON3
objlocal	::=	LOCAL bind
compspec ::=	( forspec | ifspec )*
forspec	::=	FOR IDENTIFIER0 IN expr
ifspec	::=	IF expr
fieldname	::=	IDENTIFIER0
| DOUBLE_QUOTED_STRING
| SINGLE_QUOTED_STRING
| VERBATIM_DOUBLE_QUOTED_STRING
| VERBATIM_SINGLE_QUOTED_STRING
| TRIPLE_BAR_QUOTED_STRING
| L_BRACKET expr R_BRACKET
assertStmt	::=	ASSERT expr ( COLON expr )?
bind ::=	IDENTIFIER0 EQUAL expr
|	IDENTIFIER0 L_PAREN ( params )? R_PAREN EQUAL expr
arg ::= (IDENTIFIER EQUAL)? expr
args	::= arg ( COMMA arg )* ( COMMA )?

param ::= IDENTIFIER0 (EQUAL expr)?
params	::=	param (COMMA param)* ( COMMA )?

binaryop	::=	ASTERISK | SLASH | PERCENT | PLUS | MINUS | DOUBLE_LESS | DOUBLE_GREATER | LESS_THAN | LESS_EQUAL | GREATER_THAN | GREATER_EQUAL | DOUBLE_EQUAL | NOT_EQUAL | IN | AND | CARAT | BAR | DOUBLE_AND | DOUBLE_BAR
unaryop	::=	MINUS | PLUS | EXCLAMATION | TILDE
importop ::= (IMPORT (DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING)) {
    mixin="com.jsonnetplugin.psi.impl.JsonnetNamedElementImpl"
    implements="com.jsonnetplugin.psi.JsonnetNamedElement"
    //methods=[getKey getValue getName setName getNameIdentifier]
}

importstrop ::= (IMPORTSTR (DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING)) {
    mixin="com.jsonnetplugin.psi.impl.JsonnetNamedElementImpl"
    implements="com.jsonnetplugin.psi.JsonnetNamedElement"
    //methods=[getKey getValue getName setName getNameIdentifier]
}
outerlocal ::= LOCAL bind ( COMMA bind )* SEMICOLON expr
IDENTIFIER0 ::= IDENTIFIER {
    mixin="com.jsonnetplugin.psi.impl.JsonnetNamedElementImpl"
    implements="com.jsonnetplugin.psi.JsonnetNamedElement"
}